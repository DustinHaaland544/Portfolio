action-types/index.ts

export enum ActionType {
    SEARCH_REPOSITORIES = "search_repositories",
    SEARCH_REPOSITORIES_SUCCESS = "search_repositories_success",
    SEARCH_REPOSITORIES_ERROR = "search_repositories_error"
}


actions/index.ts

import { ActionType } from "../action-types";

interface SearchRepositoriesAction {
    type: ActionType.SEARCH_REPOSITORIES;
}

interface SearchRepositoriesSuccessAction {
    type: ActionType.SEARCH_REPOSITORIES_SUCCESS;
    payload: string[];
}

interface SearchRepositoriesErrorAction {
    type: ActionType.SEARCH_REPOSITORIES_ERROR;
    payload: string;
}

export type Action =                        // This action represents all possible action that
    | SearchRepositoriesAction              // can be performed by our reducers
    | SearchRepositoriesSuccessAction
    | SearchRepositoriesErrorAction;


reducers/repositoriesReducer.ts

import { ActionType } from "../action-types";
import { Action } from "../actions";

interface RepositoriesState {
    loading: boolean;
    error: string | null;
    data: string[];
  }
  
const reducer = (
    state: RepositoriesState, 
    action: Action
): RepositoriesState => {
    switch(action.type){
        case ActionType.SEARCH_REPOSITORIES:                            // When the user clicks on the "search repositories" button
            return {loading: true, error: null, data: []};
        case ActionType.SEARCH_REPOSITORIES_SUCCESS:                    // If the search is successful 
            return {loading: false, error: null, data: action.payload};
        case ActionType.SEARCH_REPOSITORIES_ERROR:                      // If the search fails
            return {loading: false, error: action.payload, data: []};
        default:
            return state;
    }

};

export default reducer;


action-creators/index.ts

import axios from "axios";
import { Dispatch } from "redux";
import { ActionType } from "../action-types";
import { Action } from "../actions";

export const searchRepositories = (term: string) => {
    return async (dispatch: Dispatch<Action>) => {                       // Manually "dispatching" action to the redux store to search repositories
        dispatch({
            type: ActionType.SEARCH_REPOSITORIES
        });

        try {
            const { data } = await axios.get("https://registry.npmjs.org/-/v1/search", {    // Making the search request to the API
                params: {
                    text: term
                }
            });

            const names = data.objects.map((result: any) => {           // Mapping through the data got back in response
                return result.package.name;
            });

            dispatch({                                                  // Dispatching the success action after finding the repository
                type: ActionType.SEARCH_REPOSITORIES_SUCCESS,
                payload: names                                          // Sending the name of the repository found with the dispatch as payload
            })

        } catch (err) {                                                 // Dispatching the error action if the repository searched for is not found
            if(err instanceof Error) {
                dispatch({
                    type: ActionType.SEARCH_REPOSITORIES_ERROR,
                    payload: err.message,                               // Sending the error message with the dispatch as payload
                })
            }
        }
    };
};
