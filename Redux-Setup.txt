action-types/index.ts

export enum ActionType {
    SEARCH_REPOSITORIES = "search_repositories",
    SEARCH_REPOSITORIES_SUCCESS = "search_repositories_success",
    SEARCH_REPOSITORIES_ERROR = "search_repositories_error"
}


actions/index.ts

import { ActionType } from "../action-types";

interface SearchRepositoriesAction {
    type: ActionType.SEARCH_REPOSITORIES;
}

interface SearchRepositoriesSuccessAction {
    type: ActionType.SEARCH_REPOSITORIES_SUCCESS;
    payload: string[];
}

interface SearchRepositoriesErrorAction {
    type: ActionType.SEARCH_REPOSITORIES_ERROR;
    payload: string;
}

export type Action =                        // This action represents all possible action that
    | SearchRepositoriesAction              // can be performed by our reducers
    | SearchRepositoriesSuccessAction
    | SearchRepositoriesErrorAction;


reducers/repositoriesReducer.ts

import { ActionType } from "../action-types";
import { Action } from "../actions";

interface RepositoriesState {
    loading: boolean;
    error: string | null;
    data: string[];
  }
  
const reducer = (
    state: RepositoriesState, 
    action: Action
): RepositoriesState => {
    switch(action.type){
        case ActionType.SEARCH_REPOSITORIES:                            // When the user clicks on the "search repositories" button
            return {loading: true, error: null, data: []};
        case ActionType.SEARCH_REPOSITORIES_SUCCESS:                    // If the search is successful 
            return {loading: false, error: null, data: action.payload};
        case ActionType.SEARCH_REPOSITORIES_ERROR:                      // If the search fails
            return {loading: false, error: action.payload, data: []};
        default:
            return state;
    }

};

export default reducer;
